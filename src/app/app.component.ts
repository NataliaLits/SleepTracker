import { Component, OnInit, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup }        from '@angular/forms';
import { MatTableDataSource }            from '@angular/material/table';
import { ChartConfiguration, ChartOptions } from 'chart.js';
import { BaseChartDirective }           from 'ng2-charts';

interface SleepSession {
  date:     string;
  duration: string;
  mood:     number;
  emoji:    string;
  hours:    number;
}

interface Emoji {
  value: number;
  symbol: string;
  label: string;
}

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls:  ['./app.component.scss']
})
export class AppComponent implements OnInit {
  @ViewChild(BaseChartDirective) chart?: BaseChartDirective;

  // –§–æ—Ä–º–∞ –∏ –µ—ë –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  sleepForm: FormGroup;
  showForm  = false;

  // –ú–∞—Å—Å–∏–≤ —ç–º–æ–¥–∂–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
  selectedMood = 5;
  emojis: Emoji[] = [
    { value: 1,  symbol: 'üòû', label: 'Terrible'   },
    { value: 2,  symbol: 'üòï', label: 'Bad'        },
    { value: 3,  symbol: 'üòê', label: 'Meh'        },
    { value: 4,  symbol: 'üôÇ', label: 'Okay'       },
    { value: 5,  symbol: 'üòä', label: 'Good'       },
    { value: 6,  symbol: 'üòÉ', label: 'Great'      },
    { value: 7,  symbol: 'üòÅ', label: 'Awesome'    },
    { value: 8,  symbol: 'üòÜ', label: 'Fantastic'  },
    { value: 9,  symbol: 'ü•≥', label: 'Epic'       },
    { value: 10, symbol:'ü§©', label: 'Mind-blown'}
  ];

  // –¢–∞–±–ª–∏—Ü–∞
  displayedColumns = ['date','duration','mood'];
  dataSource       = new MatTableDataSource<SleepSession>([]);

  // –î–∞–Ω–Ω—ã–µ –∏ –æ–ø—Ü–∏–∏ –¥–ª—è Chart.js
  public chartData: ChartConfiguration<'line'>['data'] = {
    labels: [],
    datasets: [
      {
        data: [],
        label: 'Sleep Hours',
        fill: false,
        borderColor: '#8e24aa',
        tension: 0.4
      },
      {
        data: [],
        label: 'Ideal (8h)',
        fill: false,
        borderColor: 'green',
        borderDash: [5, 5]
      }
    ]
  };
  public chartOptions: ChartOptions<'line'> = {
    responsive: true,
    scales: {
      y: {
        min: 0,
        max: 12,
        ticks: { stepSize: 1 }
      }
    }
  };

  constructor(private fb: FormBuilder) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º mood
    this.sleepForm = this.fb.group({
      date:      [ this.today(),          [] ],
      startTime: ['',                    []],
      endTime:   ['',                    []],
      mood:      [ this.selectedMood,    []]
    });
  }

  ngOnInit() {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å selectedMood —Å —Ñ–æ—Ä–º–æ–π
    this.sleepForm.get('mood')!.valueChanges
      .subscribe((v: number) => this.selectedMood = v);
  }

  onSubmit() {
    if (this.sleepForm.invalid) return;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã
    const { date, startTime, endTime, mood } = this.sleepForm.value;

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö –∏ ms
    const hours    = this.computeHours(startTime, endTime);
    const duration = `${Math.floor(hours)}h ${Math.round((hours % 1)*60)}m`;
    const emoji    = this.emojis.find(e => e.value === mood)!.symbol;

    // 1) –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
    const newRec: SleepSession = { date, duration, mood, emoji, hours };

    // 2) –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    const updated = [...this.dataSource.data, newRec];
    updated.sort((a, b) =>
      new Date(a.date).getTime() - new Date(b.date).getTime()
    );

    // 3) –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    this.dataSource.data = updated;

    // 4) –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –±–∞–∑–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    this.chartData.labels    = updated.map(r => r.date);
    this.chartData.datasets[0].data = updated.map(r => r.hours);
    this.chartData.datasets[1].data = updated.map(() => 8);

    // 5) –†–µ—Ä–µ–Ω–¥–∏–º –≥—Ä–∞—Ñ–∏–∫
    this.chart?.update();

    // 6) –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ (–¥–∞—Ç—É –∏ mood –æ—Å—Ç–∞–≤–ª—è–µ–º) –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    this.sleepForm.patchValue({ startTime: '', endTime: '' });
    this.showForm = false;
  }

  /** –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∞ –≤ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤, —É—á–∏—Ç—ã–≤–∞—è –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å */
  private computeHours(a: string, b: string): number {
    const [ah, am] = a.split(':').map(Number);
    const [bh, bm] = b.split(':').map(Number);
    let start = ah + am/60;
    let end   = bh + bm/60;
    if (end < start) end += 24;
    return +(end - start).toFixed(2);
  }

  /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –¥–ª—è <input type="date"> */
  private today(): string {
    return new Date().toISOString().slice(0,10);
  }
}
